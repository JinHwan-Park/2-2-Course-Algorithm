#define MAX_INT 2147483647

//외판원문제알고리즘

//비트에서 1이 몇개인지 세는 함수
int bitnum(int n)
{
	int count = 0;
	int i;

	for (i = 0; i < 32; i++) {
		if ((n&MAX_INT) % 2 == 1) {	//첫번째 비트가 1이라면
			count++;
		}
		n = n >> 1;
	}
	return count;
}

//2^(n-1)을 리턴하는 함수
int subsetNum(int n) 
{
	int num = 1;
	int i;

	for (i = 0; i < n - 1; i++) {	
		num = num * 2;					
	}

	return num;
}

//n = 도시의개수 W[i][j] = i번째 도시에서 j번째 도시를 연결하는 이음선의 가중치 
//P[i][A] = A에 속한 도시를 한 번씩 거쳐서 vi에서 v1로 가는 최단경로에서 vi다음으로 첫번째로 거치는 도시
int travel(int n, int** W, int** P)
{
	int minlength=0, minNum=0, minj=0, num=0;
	int i, j, k, a;
	int **D;

	D = (int **)malloc(sizeof(int **) * (n+1));
	if (D == NULL) {
		printf("메모리 할당 오류1, travel()\n");
		return 0;
	}

	for (i = 1; i <= n; i++) {
		D[i] = (int *)malloc(sizeof(int *) * (subsetNum(n) + 1));
		if (D[i] == NULL) {
			printf("메모리 할당 오류2, travel()\n");
			return 0;
		}
	}

	for (i = 2; i <= n; i++) {
		D[i][0] = W[i][1];
	}
	
	for (k = 1; k <= n - 2; k++) {	//subset의 원소 갯수
		for (a = 0; a <= (subsetNum(n) * 2 - 1); a++) {	//subset들을 하나하나 체크해서 원소 갯수가 k개면 루프를 돌림
			if ((bitnum(a) == k) && (a % 2 == 0)) {
				for (i = 2; i <= n; i++) { //i는 점들을 가르키는데, subset a에 없어야한다. subsetNum(i)는 원소로 vi 1개만을 가지는 집합을 가리킨다.
					num = subsetNum(i) & a;
					if (num == 0) {
						for (j = 2; j <= n; j++) {	//점들을 다 체크해서 a에 있는 원소라면 루프 진행
							//printf("k = %d, a = %d, i = %d, j = %d\n",k, a, i, j);
							num = subsetNum(j) & (a);
							if (num != 0) {
								minNum = W[i][j] + D[j][a - subsetNum(j)];	//minNum에 첫번째 계산 값 저장
								minj = j;
								//printf("초기값 : minNum = %d, minj = %d\n", minNum, minj);
								break;
							}
						}
						
						for (j = 2; j <= n; j++) {	//점들을 다 체크해서 a에 있는 원소라면 루프 진행 
							num = subsetNum(j)&a;
							if (num != 0) {
								if (minNum > W[i][j] + D[j][a - subsetNum(j)]) { //현재까지의 최소값보다 작다면, minNum에 저장
									minNum = W[i][j] + D[j][a - subsetNum(j)];
									minj = j;
								}
							}
						}
						D[i][a] = minNum;
						if (D[i][a] >= 20000) {
							P[i][a] = 20001;
						}
						else {
							P[i][a] = minj;
						}
						//printf("최소값 : D[%d][%d] = %d, P[%d][%d] = %d\n", i, a, D[i][a], i, a, P[i][a]);
					}
				}
			}
		}
	}
	minNum = W[1][2] + D[2][subsetNum(n)*2 - 1 - subsetNum(1) - subsetNum(2)];
	minj = 2;
	for (j = 2; j <= n; j++) {
		if (minNum > W[1][j] + D[j][subsetNum(n)*2 - 1 - subsetNum(1) - subsetNum(j)]) {
			minNum = W[1][j] + D[j][subsetNum(n)*2 - 1 - subsetNum(1) - subsetNum(j)];
			minj = j;
		}
	}
	D[1][subsetNum(n)*2 - 2] = minNum;
	P[1][subsetNum(n)*2 - 2] = minj;
	
	minlength = D[1][subsetNum(n)*2 - 2];

	return minlength;
}

//경로출력함
void optimaltravel(int **P, int start, int visit)
{
	int firstvisit;
	if (start >= 20000) {
		printf("경로가 없습니다.\n");
		return;
	}
	if (visit == 0) {
		printf("V%d -> V1\n", start);
		return;
	}
	else {
		printf("V%d -> ", start);
		firstvisit = P[start][visit];
		
		optimaltravel(P, firstvisit, visit - subsetNum(firstvisit));
	}
}
