// 합병정렬 알고리즘 구현
// n개의 원소를 오름차순으로 정렬
// merge함수의 최악 시간복잡도는 h+m-1 이다.
// mergesort함수의 최악 시간복잡도는 W(n) = W(h) + W(m) + h + m - 1 이다.
// 계산하면 W(n) ∈ Θ(nlgn)
void mergesort(int *value, int n)
{
	int i;
	if (n > 1 && value != NULL) {
		int h = (n / 2);		//분할된 첫번째 배열의 원소 갯수
		int m = n - h;			//분할된 두번째 배열의 원소 갯수
		int *subValue1 = NULL, *subValue2 = NULL;

		subValue1 = (int *)malloc(sizeof(int)*h);
		subValue2 = (int *)malloc(sizeof(int)*m);
		if (subValue1 == NULL || subValue2 == NULL) {
			printf("오류, 메모리 할당 실패 mergesort()\n");		//배열 분할 및 메모리 할당과 메모리 검사
			return;
		}

		for (i = 0; i < h; i++) {
			subValue1[i] = value[i];		//분할 한 배열에 원래 배열의 값을 복사
		}
		for (i = 0; i < m; i++) {
			subValue2[i] = value[i+h];
		}
		
		if (h != 1)	mergesort(subValue1, h);
		if (m != 1) mergesort(subValue2, m); //원소가 1개까지 분할 되었을 때까지 실행
		merge(h, m, subValue1, subValue2, value);

		free(subValue1);
		free(subValue2);
	}
}

void merge(int h, int m, int* subValue1, int* subValue2, int* value)
{
	int i = 0, j = 0, k = 0;

	while (i < h && j < m) {	// 분할된 2개의 배열중 1개의 배열을 다 탐색할 때 까지
		if (subValue1[i] < subValue2[j]) {
			value[k] = subValue1[i];
			i++;
		}
		else {	// subValue1[i] >= subValue2[j]인 경우
			value[k] = subValue2[j];
			j++;
		}
		k++;
	}

	if (i >= h) {	// subValue1 의 항은 모두 정렬되었고, subValue2의 항이 남았을 경우
		while (j < m) {
			value[k] = subValue2[j];
			j++; k++;
		}
	}

	else {	// subValue2 의 항은 모두 정렬되었고, subValue1의 항이 남았을 경우
		while (i < h) {
			value[k] = subValue1[i];
			i++; k++;
		}
	}
}

// 합병정렬2 알고리즘 구현
// n개의 원소를 오름차순으로 정렬
// 계속 배열을 생성하지 않고 n개의 원소를 가진 배열 하나만 추가적으로 있어도 합병정렬이 작동하도록 함
// 메모리 절약 가능
void mergesort2(int low, int high, int *array, int *temp)
{
	int mid = 0;

	if (low < high) {
		mid = (low + high) / 2;
		mergesort2(low, mid, array, temp);
		mergesort2(mid + 1, high, array, temp);
		merge2(low, mid, high, array, temp);
	}
}

void merge2(int low, int mid, int high, int *array, int *temp)
{
	int i = low, j = mid+1, k = low;
	int s;

	while (i <= mid && j <= high) {
		if (array[i] < array[j]) {
			temp[k] = array[i];
			i++;
		}
		else {
			temp[k] = array[j];
			j++;
		}
		k++;
	}

	if (i > mid) {
		for (s = j; s <= high; s++,k++) {
			temp[k] = array[s];
		}
	}
	else {
		for (s = i; s <= mid; s++, k++) {
			temp[k] = array[s];
		}
	}

	for (s = low; s <= high; s++) {
		array[s] = temp[s];
	}
	
}
