#define TRUE 1
#define FALSE 0

#include <stdio.h>

int n, m;	// n = 정점의 수 // m = 색의 수
int **W;	// 그래프
int *vcolor;// output
int count=0;// 색칠되는 경우의 수

void m_coloring(int i) {
	int color;
	int j;

	if (promising(i) == TRUE) {
		if (i == n) {										//방법을 찾은 경우
			/*for (j = 1; j <= n; j++) {					//경로를 구하고 싶다면 주석 안의 코드를 이용
				printf("vcolor[%d] = %d\n", j, vcolor[j]);
			}
			printf("\n");*/
		count++;
		}
		else {
			for (color = 1; color <= m; color++) {
				vcolor[i + 1] = color;
				m_coloring(i + 1);
			}
		}
	}
}

int promising(int i) {
	int j, ret;
	ret = TRUE;
	j = 1;
	while (j < i && ret) {
		if (W[i][j] && vcolor[i] == vcolor[j]) ret = FALSE;
		j++;
	}
	return ret;
}

int main() {
	int i,j;

	n = 25;
	m = 4;

	W = (int **)malloc(sizeof(int *) * (n + 1));
	if (W == NULL) {
		printf("메모리 할당 오류, main()\n");
		return 0;
	}
	for (i = 0; i <= n; i++) {
		W[i] = (int *)malloc(sizeof(int) * n);
		if (W[i] == NULL) {
			printf("메모리 할당 오류2, main()\n");
			return 0;
		}
	}

	vcolor = (int *)malloc(sizeof(int) * n);
	if (vcolor == NULL) {
		printf("메모리 할당 오류3, main()\n");
		return 0;
	}

	//서울시 25개의 구를 인접행렬로 표현
	for (i = 0; i <= n; i++) {
		for (j = 0; j <= n; j++) {
			W[i][j] = 0;
		}
	}
	W[1][2] = 1; W[1][3] = 1;
	W[2][3] = 1; W[2][4] = 1;
	W[3][4] = 1; W[3][5] = 1;
	W[4][5] = 1; W[4][6] = 1; W[4][7] = 1;
	W[5][6] = 1; W[5][10] = 1;
	W[6][7] = 1; W[6][8] = 1; W[6][9] = 1; W[6][10] = 1;
	W[7][8] = 1; W[7][17] = 1; W[7][18] = 1;
	W[8][9] = 1; W[8][15] = 1; W[8][18] = 1; W[8][19] = 1;
	W[9][10] = 1; W[9][13] = 1; W[9][15] = 1;
	W[10][11] = 1; W[10][12] = 1; W[10][13] = 1;
	W[11][12] = 1;
	W[12][13] = 1;
	W[13][14] = 1; W[13][15] = 1;
	W[14][15] = 1; W[14][16] = 1; W[14][21] = 1;
	W[15][16] = 1; W[15][19] = 1; W[15][20] = 1;
	W[16][20] = 1; W[16][21] = 1;
	W[17][18] = 1; W[17][19] = 1;
	W[18][19] = 1;
	W[19][20] = 1; W[19][23] = 1;
	W[20][23] = 1; W[20][24] = 1; W[20][25] = 1;
	W[21][22] = 1; W[21][25] = 1;
	W[22][25] = 1;
	W[23][24] = 1;
	W[24][25] = 1;
	for (i = 0; i <= n; i++) {
		for (j = 0; j <= i; j++) {
			W[i][j] = W[j][i];
		}
	}
	
	m_coloring(0);

	if (count == 0) printf("%d가지의 색으로 색칠되는 경우가 없습니다.\n", m);
	else {
		printf("%d가지의 색으로 색칠되는 경우의 수 : %d\n", m, count);
	}

	return 0;
}
